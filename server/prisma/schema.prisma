// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  hashPassword       String
  role               Role?
  employe            Employe  @relation(fields: [employeId], references: [id])
  employeId          Int      @unique
  dateCreationCompte DateTime @default(now())

  Mission     Mission? @relation(fields: [missionCode], references: [code])
  missionCode String?
}

enum Role {
  GESTIONNAIRE
  CHEF_MISSION
  CHEF_TERRAIN
  DIRECTEUR
  ADMINISTRATEUR
}

model Employe {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  dateAdhesion  DateTime      @db.Date
  status        StatusEmploye
  fonction      Fonction      @relation(fields: [fonctionId], references: [id])
  fonctionId    Int
  utilisateur   Utilisateur?
  nom           String
  prenom        String
  dateNaissance DateTime      @db.Date
  Equipe        Equipe?       @relation(fields: [equipeId], references: [id])
  equipeId      Int?
}

enum StatusEmploye {
  EN_MISSION
  EN_CONGE
  RETRAITE
  EN_SERVICE
  SENCTONNE
}

model Fonction {
  id      Int       @id @default(autoincrement())
  nom     String
  Employe Employe[]
}

model Projet {
  id Int @id @default(autoincrement())

  Objectif   Objectif     @relation(fields: [objectifId], references: [id])
  objectifId Int          @unique
  EtatProjet EtatProjet[]

  Materiel Materiel[]

  createdAt DateTime    @default(now())
  Coodonnes Coordonne[]
  Equipes   Execution[]
}

model EtatProjet {
  id       String         @id @default(cuid())
  typeEtat TypeEtatProjet
  Projet   Projet         @relation(fields: [projetId], references: [id])
  projetId Int
  dateEtat DateTime       @db.Date
}

enum TypeEtatProjet {
  PLANIFICATION
  PRODUCTION
  CLOTURATION
  ANNULATION
}

model Objectif {
  id     Int      @id @default(autoincrement())
  Projet Projet?
  VP     Int
  debut  DateTime @db.Date
  fin    DateTime @db.Date
}

model Coordonne {
  id        Int      @id @default(autoincrement())
  longitude Float
  latitude  Float
  Wilaya    Wilaya   @relation(fields: [numWilaya], references: [numero])
  numWilaya Int
  Projet    Projet[]
}

model Wilaya {
  numero    Int         @id
  nom       String
  Coordonne Coordonne[]
}

model Mission {
  code String      @id
  type TypeMission

  Chefs Utilisateur[]

  Equipes Equipe[]
}

enum TypeMission {
  MISSION2D
  MISSION3D
}

model Equipe {
  id         Int      @id @default(autoincrement())
  activite   Activite @relation(fields: [activiteId], references: [id])
  activiteId Int

  Mission   Mission @relation(fields: [missionId], references: [code])
  missionId String

  Membres Employe[]
  Projets Execution[]
}

model Activite {
  id      Int      @id @default(autoincrement())
  nom     String
  Equipes Equipe[]
}

model Execution {
  Projet   Projet @relation(fields: [projetId], references: [id])
  projetId Int

  Equipe   Equipe   @relation(fields: [equipeId], references: [id])
  equipeId Int
  debut    DateTime @db.Date
  fin      DateTime @db.Date

  @@id([projetId, equipeId])
}

model Materiel {
  code        String  @id
  designation String
  Projet      Projet? @relation(fields: [projetId], references: [id])
  projetId    Int?
  enPanne     Boolean
}

model Reparation {
  id             Int      @id @default(autoincrement())
  dPanne         DateTime @db.Date
  dRep           DateTime @db.Date
  detailProbleme String
  Pannes         Panne[]
}

model Panne {
  id          Int          @id @default(autoincrement())
  nom         String
  Reparations Reparation[]
}

model TypeMateriel {
  id  Int    @id @default(autoincrement())
  nom String
}
