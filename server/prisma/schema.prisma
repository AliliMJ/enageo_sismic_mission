// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Compte {
  id                 Int      @id @default(autoincrement())
  username           String   @unique
  hashPassword       String
  role               Role
  employe            Employe  @relation(fields: [employeId], references: [id])
  employeId          Int      @unique
  dateCreationCompte DateTime @db.Date
}

enum Role {
  GESTIONNAIRE
  CHEF_MISSION
  CHEF_TERRAIN
  DIRECTEUR
  ADMINISTRATEUR
}

enum Sexe {
  Homme
  Femme
}

model Employe {
  id                  Int      @id @default(autoincrement())
  nom                 String
  prenom              String
  dateRejoint         DateTime @db.Date
  dateNaissance       DateTime @db.Date
  WilayalieuNaissance Wilaya   @relation(fields: [lieuNaissance], references: [numWilaya])
  lieuNaissance       Int
  email               String?  @unique
  numTel              String   @unique
  adresse             String
  sexe                Sexe
  numIdentite         String   @unique
  groupeSanguin       String?
  regimTravail        String?

  Mission     Mission? @relation(fields: [codeMission], references: [codeMission])
  codeMission String?

  etat EtatEmploye

  fonction   Fonction @relation(fields: [fonctionId], references: [idFonction])
  fonctionId Int

  compte Compte?

  Equipe   Equipe? @relation(fields: [idEquipe], references: [idEquipe])
  idEquipe Int?
}

model Fonction {
  idFonction  Int       @id @default(autoincrement())
  nom         String
  description String
  Employe     Employe[]
}

model Projet {
  idProjet     Int      @id @default(autoincrement())
  nom          String
  description  String?
  budget       Float
  objVP        Int
  objDateDebut DateTime @db.Date
  objDateFin   DateTime @db.Date
  Contrat      Contrat?
  Mission      Mission  @relation(fields: [codeMission], references: [codeMission])
  codeMission  String

  Etats EtatProjet[]

  Terrain          Terrain?  @relation(fields: [terrainIdTerrain], references: [idTerrain])
  Rapports         Rapport[]
  terrainIdTerrain Int?
  Tache            Tache[]
  annule           Boolean   @default(false)
}

model Client {
  idCl    Int    @id @default(autoincrement())
  nom     String
  email   String
  numFax  String
  adresse String

  Contrat Contrat[]
}

model Contrat {
  numContrat     Int      @id @default(autoincrement())
  debut          DateTime
  fin            DateTime
  Client         Client   @relation(fields: [idCl], references: [idCl])
  idCl           Int
  Projet         Projet   @relation(fields: [projetIdProjet], references: [idProjet])
  projetIdProjet Int      @unique
}

model EtatProjet {
  id           Int            @id @default(autoincrement())
  dPassageEtat DateTime       @default(now())
  etat         TypeEtatProjet
  Projet       Projet         @relation(fields: [idProjet], references: [idProjet])
  idProjet     Int
}

enum TypeEtatProjet {
  PLANIFICATION
  EN_PRODUCTION
  TERMINE
}

model Objectif {
  idObj       Int    @id @default(autoincrement())
  nomObj      String
  description String

  Taches Tache[]
}

model Tache {
  numT     Int      @default(autoincrement())
  Projet   Projet   @relation(fields: [idProjet], references: [idProjet])
  Objectif Objectif @relation(fields: [idObj], references: [idObj])
  idProjet Int
  idObj    Int

  valeur String
  debut  DateTime @db.Date
  duree  Int
  done   Boolean  @default(false)

  @@id([numT, idObj, idProjet])
}

model Coordonne {
  idCord    Int   @id @default(autoincrement())
  longitude Float
  latitude  Float

  Terrain          Terrain? @relation(fields: [terrainIdTerrain], references: [idTerrain])
  terrainIdTerrain Int?
}

model Terrain {
  idTerrain  Int         @id @default(autoincrement())
  Wilaya     Wilaya      @relation(fields: [numWilaya], references: [numWilaya])
  numWilaya  Int
  //distanceSiege Float
  Coordonnes Coordonne[]
  Projet     Projet[]
}

model Wilaya {
  numWilaya Int       @id
  nom       String
  Terrains  Terrain[]
  Employe   Employe[]
}

model Mission {
  codeMission  String      @id
  methodologie TypeMission
  description  String

  Equipes    Equipe[]
  Projets    Projet[]
  Employes   Employe[]
  materiels  Materiel[]
  Evenements Evenement[]
}

enum TypeMission {
  MISSION2D
  MISSION3D
}

model Equipe {
  idEquipe     Int      @id @default(autoincrement())
  activite     Activite @relation(fields: [codeActivite], references: [codeActivite])
  codeActivite String
  nom          String
  performance  Int      @default(0)

  Mission     Mission @relation(fields: [codeMission], references: [codeMission])
  codeMission String

  Membres    Employe[]
  Rendements Rendement[]
}

model Activite {
  codeActivite String   @id
  nomAct       String
  description  String?
  Equipes      Equipe[]
}

model Rapport {
  idRapport Int      @id @default(autoincrement())
  date      DateTime
  titre     String
  resume    String
  Projet    Projet   @relation(fields: [idProjet], references: [idProjet])
  idProjet  Int

  Rendements Rendement[]
}

model Rendement {
  idRendement Int    @default(autoincrement())
  Equipe      Equipe @relation(fields: [idEquipe], references: [idEquipe])
  idEquipe    Int

  Rapport   Rapport @relation(fields: [idRapport], references: [idRapport])
  idRapport Int
  hDebut    Int
  hFin      Int

  valeur Int

  @@id([idRendement, idRapport, idEquipe])
}

model Materiel {
  codeMat            String              @id
  marque             String
  modele             String
  dateService        DateTime
  designation        String
  matricule          String
  mission            Mission?            @relation(fields: [codeMission], references: [codeMission])
  codeMission        String?
  status             Int
  ReparationsInterne ReparationInterne[]
  ReparationsExterne ReparationExterne[]
  TypeMateriel       TypeMateriel        @relation(fields: [idTypeMat], references: [idTypeMat])
  idTypeMat          Int
}

model ReparationInterne {
  idRep          Int       @id @default(autoincrement())
  dPanne         DateTime? @db.Date
  dDebRep        DateTime? @db.Date
  dFinRep        DateTime? @db.Date
  detailProbleme String?
  externe        Int       @default(0)
  Materiel       Materiel  @relation(fields: [codeMat], references: [codeMat])
  cout           Float
  codeMat        String
}

model ReparationExterne {
  idRep          Int       @id @default(autoincrement())
  dPanne         DateTime? @db.Date
  dDebRep        DateTime? @db.Date
  dFinRep        DateTime? @db.Date
  detailProbleme String?
  Materiel       Materiel  @relation(fields: [codeMat], references: [codeMat])
  cout           Float
  dSortie        DateTime? @db.Date
  dArrive        DateTime? @db.Date
  dRetour        DateTime? @db.Date
  dEntree        DateTime? @db.Date
  codeMat        String
}

model TypeMateriel {
  idTypeMat Int        @id @default(autoincrement())
  libelle   String
  Materiel  Materiel[]
}

model Requisition {
  id         Int       @id @default(autoincrement())
  dateEnvoi  DateTime  @default(now())
  reponse    DateTime?
  desciption String
}

enum TypeEvenement {
  VOL
  ACCIDENT
  AUTRE
}

enum EtatEmploye {
  mission
  conge
  maladie
  sanctionne
  travail
}

model Evenement {
  id          Int           @id @default(autoincrement())
  titre       String
  date        DateTime      @db.Date
  Heure       String
  type        TypeEvenement
  description String
  readed      Boolean       @default(false)
  Mission     Mission       @relation(fields: [codeMission], references: [codeMission])
  codeMission String
}

model Consommable {
  id       Int    @id @default(autoincrement())
  titre    String
  mesure   Mesure @relation(fields: [mesureId], references: [id])
  mesureId Int
}

model Mesure {
  id          Int           @id @default(autoincrement())
  type        TypeMesure
  unite       String
  Consommable Consommable[]
}

enum TypeMesure {
  VOLUME
  POIDS
  QUANTITE
  SURFACE
  LONGEUR
}
