// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  hashPassword       String
  role               Role?
  employe            Employe  @relation(fields: [employeId], references: [id])
  employeId          Int      @unique
  dateCreationCompte DateTime @default(now())

  Mission     Mission? @relation(fields: [missionCode], references: [code])
  missionCode String?
}

enum Role {
  GESTIONNAIRE
  CHEF_MISSION
  CHEF_TERRAIN
  DIRECTEUR
  ADMINISTRATEUR
}

model Employe {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  dateAdhesion  DateTime     @db.Date
  etat          EtatEmploye  @relation(fields: [etatEmployeId], references: [id])
  etatEmployeId Int
  fonction      Fonction     @relation(fields: [fonctionId], references: [id])
  fonctionId    Int
  utilisateur   Utilisateur?
  nom           String
  prenom        String
  dateNaissance DateTime     @db.Date
  Equipe        Equipe?      @relation(fields: [equipeId], references: [id])
  equipeId      Int?
}

model EtatEmploye {
  id      Int       @id @default(autoincrement())
  nom     String
  Employe Employe[]
}

model Fonction {
  id      Int       @id @default(autoincrement())
  nom     String
  Employe Employe[]
}

model Projet {
  id Int @id @default(autoincrement())

  Plans      Plan[]
  objectifId Int          @unique
  Etats      Transition[]

  Materiel Materiel[]

  createdAt  DateTime    @default(now())
  Coodonnes  Coordonne[]
  Executions Execution[]
  Client     Client      @relation(fields: [clientId], references: [id])
  clientId   Int
}

model Client {
  id     Int      @id
  nom    String
  Projet Projet[]
}

model EtatProjet {
  id          Int          @id @default(autoincrement())
  nom         String
  Transitions Transition[]
}

model Transition {
  Projet       Projet     @relation(fields: [projetId], references: [id])
  projetId     Int
  EtatProjet   EtatProjet @relation(fields: [etatProjetId], references: [id])
  etatProjetId Int

  @@id([projetId, etatProjetId])
}

model Objectif {
  id    Int       @id @default(autoincrement())
  nom   String
  avant DateTime? @db.Date

  Plans Plan[]
}

model Plan {
  Projet     Projet   @relation(fields: [projetId], references: [id])
  Objectif   Objectif @relation(fields: [objectifId], references: [id])
  projetId   Int
  objectifId Int

  valeur String
  avant  DateTime? @db.Date

  @@id([projetId, objectifId])
}

model Coordonne {
  id        Int      @id @default(autoincrement())
  longitude Float
  latitude  Float
  Wilaya    Wilaya   @relation(fields: [numWilaya], references: [numero])
  numWilaya Int
  Projet    Projet[]
}

model Wilaya {
  numero    Int         @id
  nom       String
  Coordonne Coordonne[]
}

model Mission {
  code String      @id
  type TypeMission

  Chefs Utilisateur[]

  Executions Equipe[]
}

enum TypeMission {
  MISSION2D
  MISSION3D
}

model Equipe {
  id         Int      @id @default(autoincrement())
  activite   Activite @relation(fields: [activiteId], references: [id])
  activiteId Int

  Mission   Mission @relation(fields: [missionId], references: [code])
  missionId String

  Membres    Employe[]
  Executions Execution[]
}

model Activite {
  id      Int      @id @default(autoincrement())
  nom     String
  Equipes Equipe[]
}

model Execution {
  Projet   Projet @relation(fields: [projetId], references: [id])
  projetId Int

  Equipe   Equipe   @relation(fields: [equipeId], references: [id])
  equipeId Int
  debut    DateTime @db.Date
  fin      DateTime @db.Date

  @@id([projetId, equipeId])
}

model Materiel {
  code        String       @id
  designation String
  Projet      Projet?      @relation(fields: [projetId], references: [id])
  projetId    Int?
  enPanne     Boolean
  Reparations Reparation[]
}

model Reparation {
  id             Int       @id @default(autoincrement())
  dPanne         DateTime  @default(now())
  dRep           DateTime?
  detailProbleme String?
  Pannes         Panne[]
  Materiel       Materiel  @relation(fields: [materielCode], references: [code])
  materielCode   String
}

model Panne {
  id          Int          @id @default(autoincrement())
  nom         String
  Reparations Reparation[]
}

model TypeMateriel {
  id  Int    @id @default(autoincrement())
  nom String
}
